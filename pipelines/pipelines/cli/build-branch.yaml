#
# Copyright contributors to the Galasa project
#
# SPDX-License-Identifier: EPL-2.0
#

apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: branch-cli
  namespace: galasa-build
spec:
  params:
  - name: toBranch
    type: string
    default: main
  - name: revision
    type: string
    default: main
  - name: refspec
    type: string
    default: refs/heads/main:refs/heads/main
  - name: imageTag
    type: string
    default: main
  - name: appnameCli
    type: string
    default: main-cli
  - name: fromSimplatformBranch
    type: string
    default: prod
  - name: appnameMavenRepos
    type: string
    default: main-maven-repos
  workspaces:
  - name: git-workspace
# 
# 
# 
  tasks:
  - name: clone-automation
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/automation
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/automation
    workspaces:
     - name: output
       workspace: git-workspace

  #----------------------------------------------------------------
  # Clone the CLI repo
  - name: clone-cli
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/cli
    - name: revision
      value: $(params.revision)
    - name: refspec
      value: $(params.refspec)
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/cli
    workspaces:
     - name: output
       workspace: git-workspace   

  #----------------------------------------------------------------
  # Call gradle to pull-down dependencies we need and put them in 
  # the correct places.
  - name: gather-dependencies
    taskRef: 
      name: gradle-build
    runAfter: 
    - clone-cli
    params:
    # The context indicates which folder the build.gradle is in.
    - name: context
      value: $(context.pipelineRun.name)/cli
    - name: buildArgs
      value:
        - "-PsourceMaven=https://development.galasa.dev/main/maven-repo/maven"
        - "-PcentralMaven=https://repo.maven.apache.org/maven2/"
        - "-PtargetMaven=/workspace/git/$(context.pipelineRun.name)/cli/repo"
    - name: command
      value: 
        - installJarsIntoTemplates
        - --info
    workspaces:
    - name: git-workspace
      workspace: git-workspace

  #----------------------------------------------------------------
  # Generate Go client code from the openapi.yaml so galasactl can 
  # talk to the API server.
  - name: generate-api
    taskRef: 
      name: general-command
    runAfter:
    - clone-automation
    - clone-cli
    - gather-dependencies
    params:
    - name: context
      value: $(context.pipelineRun.name)/cli
    - name: image
      value: ghcr.io/galasa-dev/openapi:main
    - name: command
      value:  
        - java
        - -jar
        - /opt/openapi/openapi-generator-cli.jar
        - generate
        - -i
        - /workspace/git/$(context.pipelineRun.name)/cli/build/dependencies/openapi.yaml
        - -g
        - go 
        - -o
        - pkg/galasaapi
        - --additional-properties=packageName=galasaapi
        - --global-property=apiTests=false
    workspaces:
     - name: git-workspace
       workspace: git-workspace         

  #----------------------------------------------------------------
  # The go.mod is out of date, as it doesn't include the generated code
  # So remove it. It gets re-generated when we compile.
  - name: clear-mod
    taskRef:
      name: general-command
    runAfter:
    - generate-api
    params:
    - name: context
      value: $(context.pipelineRun.name)/cli/pkg/galasaapi
    - name: command
      value:
        - rm
        - -v
        - go.mod
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  #----------------------------------------------------------------
  # The go.mod is out of date, as it doesn't include the generated code
  # So remove it. It gets re-generated when we compile.
  - name: clear-sum
    taskRef:
      name: general-command
    runAfter:
    - clear-mod
    params:
    - name: context
      value: $(context.pipelineRun.name)/cli/pkg/galasaapi
    - name: command
      value:
        - rm
        - -v
        - go.sum
    workspaces:
     - name: git-workspace
       workspace: git-workspace     

  #----------------------------------------------------------------
  # The go code needs to know which version of Galasa it is part of.
  # So substitute an eye-catcher with the correct value.
  - name: update-version
    taskRef: 
      name: script
    runAfter:
    - clear-sum   
    params:    
    - name: context
      value: $(context.pipelineRun.name)/cli
    - name: script
      value:  
        version=$(cat VERSION) &&
        cat pkg/cmd/root.go | sed "s/unknowncliversion-unknowngithash/${version}/1" > temp.txt &&
        mv -f temp.txt pkg/cmd/root.go &&
        cat pkg/cmd/root.go 
    workspaces:
     - name: git-workspace
       workspace: git-workspace 

  #----------------------------------------------------------------
  - name: get-commit
    taskRef:
      name: get-commit
    runAfter:
    - update-version
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: repo
      value: cli
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  #----------------------------------------------------------------
  # Invoke the make command to build the go code, run unit tests and
  # gather code coverage stats.
  - name: galasactl-make
    taskRef:
      name: make-with-params
    runAfter:
    - get-commit
    params:
    - name: directory
      value: $(context.pipelineRun.name)/cli
    workspaces:
     - name: git-workspace
       workspace: git-workspace   

  #----------------------------------------------------------------
  # START OF TESTS
  #----------------------------------------------------------------
  - name: chmod-ecosystem-script
    taskRef: 
      name: general-command
    runAfter:
      - galasactl-make
    params:
    - name: context
      value: $(context.pipelineRun.name)/cli
    - name: image
      value: harbor.galasa.dev/docker_proxy_cache/library/bash:3.2.57
    - name: command
      value: 
        - chmod
        - +x
        - test-galasactl-ecosystem.sh
    workspaces:
     - name: git-workspace
       workspace: git-workspace

#----------------------------------------------------------------
  - name: test-galasactl-ecosystem-linux-x86-64
    taskRef: 
      name: galasactl
    runAfter:
      - chmod-ecosystem-script
    params:
    - name: context
      value: $(context.pipelineRun.name)/cli
    - name: image
      value: ghcr.io/galasa-dev/openjdk17-ibm-gradle:main
    - name: galasaHome
      value: /workspace/git/$(context.pipelineRun.name)
    - name: entrypoint
      value: ./test-galasactl-ecosystem.sh
    - name: command
      value:
        - --bootstrap
        - https://prod1-galasa-dev.cicsk8s.hursley.ibm.com/api/bootstrap
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  #----------------------------------------------------------------
  # END OF TESTS
  #----------------------------------------------------------------