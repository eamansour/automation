#
# Copyright contributors to the Galasa project
#
# SPDX-License-Identifier: EPL-2.0
#
name: Build custom images for automation

on:
  push:
    branches: 
      - 'main'

env:
  REGISTRY: ghcr.io
  NAMESPACE: ${{ github.repository_owner }}
  BRANCH: ${{ github.ref_name }}

jobs:
  check-required-secrets-configured:
    name: Check required secrets configured
    uses: galasa-dev/galasa/.github/workflows/check-required-secrets-configured.yaml@main
    with:
      check_write_github_packages_username: 'true'
      check_write_github_packages_token: 'true'
    secrets:
      WRITE_GITHUB_PACKAGES_USERNAME: ${{ vars.WRITE_GITHUB_PACKAGES_USERNAME }}
      WRITE_GITHUB_PACKAGES_TOKEN: ${{ secrets.WRITE_GITHUB_PACKAGES_TOKEN }}

  build-gpg-image:
    name: Build the 'gpg' image
    runs-on: ubuntu-latest
    needs: check-required-secrets-configured

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            dockerfiles/common

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/gpg

      - name: Log in to the GitHub Container registry
        uses: docker/login-action@v3
        env: 
          WRITE_GITHUB_PACKAGES_USERNAME: ${{ vars.WRITE_GITHUB_PACKAGES_USERNAME }}
          WRITE_GITHUB_PACKAGES_TOKEN: ${{ secrets.WRITE_GITHUB_PACKAGES_TOKEN }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.WRITE_GITHUB_PACKAGES_USERNAME }}
          password: ${{ env.WRITE_GITHUB_PACKAGES_TOKEN }}

      - name: Build and push 'gpg' Docker image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: dockerfiles/common
          file: dockerfiles/common/gpg-dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-kubectl-image:
    name: Build the 'kubectl' image
    runs-on: ubuntu-latest
    needs: check-required-secrets-configured

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            dockerfiles/common

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/kubectl

      - name: Log in to the GitHub Container registry
        uses: docker/login-action@v3
        env: 
          WRITE_GITHUB_PACKAGES_USERNAME: ${{ vars.WRITE_GITHUB_PACKAGES_USERNAME }}
          WRITE_GITHUB_PACKAGES_TOKEN: ${{ secrets.WRITE_GITHUB_PACKAGES_TOKEN }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.WRITE_GITHUB_PACKAGES_USERNAME }}
          password: ${{ env.WRITE_GITHUB_PACKAGES_TOKEN }}

      - name: Build and push 'kubectl' Docker image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: dockerfiles/common
          file: dockerfiles/common/kubectl-dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-argocdcli-image:
    name: Build the 'argocdcli' image
    runs-on: ubuntu-latest
    needs: check-required-secrets-configured

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            dockerfiles/common

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/argocdcli

      - name: Log in to the GitHub Container registry
        uses: docker/login-action@v3
        env: 
          WRITE_GITHUB_PACKAGES_USERNAME: ${{ vars.WRITE_GITHUB_PACKAGES_USERNAME }}
          WRITE_GITHUB_PACKAGES_TOKEN: ${{ secrets.WRITE_GITHUB_PACKAGES_TOKEN }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.WRITE_GITHUB_PACKAGES_USERNAME }}
          password: ${{ env.WRITE_GITHUB_PACKAGES_TOKEN }}

      - name: Build and push 'argocdcli' Docker image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: dockerfiles/common
          file: dockerfiles/common/argocd-dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-gitcli-image:
    name: Build the 'gitcli' image
    runs-on: ubuntu-latest
    needs: check-required-secrets-configured

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            dockerfiles/common

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/gitcli

      - name: Log in to the GitHub Container registry
        uses: docker/login-action@v3
        env: 
          WRITE_GITHUB_PACKAGES_USERNAME: ${{ vars.WRITE_GITHUB_PACKAGES_USERNAME }}
          WRITE_GITHUB_PACKAGES_TOKEN: ${{ secrets.WRITE_GITHUB_PACKAGES_TOKEN }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.WRITE_GITHUB_PACKAGES_USERNAME }}
          password: ${{ env.WRITE_GITHUB_PACKAGES_TOKEN }}

      - name: Build and push 'gitcli' Docker image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: dockerfiles/common
          file: dockerfiles/common/gitcli-dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-openapi-image:
    name: Build the 'openapi' image
    runs-on: ubuntu-latest
    needs: check-required-secrets-configured

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            dockerfiles/common

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/openapi

      - name: Log in to the GitHub Container registry
        uses: docker/login-action@v3
        env: 
          WRITE_GITHUB_PACKAGES_USERNAME: ${{ vars.WRITE_GITHUB_PACKAGES_USERNAME }}
          WRITE_GITHUB_PACKAGES_TOKEN: ${{ secrets.WRITE_GITHUB_PACKAGES_TOKEN }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.WRITE_GITHUB_PACKAGES_USERNAME }}
          password: ${{ env.WRITE_GITHUB_PACKAGES_TOKEN }}

      - name: Build and push 'openapi' Docker image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: dockerfiles/common
          file: dockerfiles/common/openapi-dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  
  build-swagger-image:
    name: Build the 'swagger' image
    runs-on: ubuntu-latest
    needs: check-required-secrets-configured

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            dockerfiles/common

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/swagger

      - name: Log in to the GitHub Container registry
        uses: docker/login-action@v3
        env: 
          WRITE_GITHUB_PACKAGES_USERNAME: ${{ vars.WRITE_GITHUB_PACKAGES_USERNAME }}
          WRITE_GITHUB_PACKAGES_TOKEN: ${{ secrets.WRITE_GITHUB_PACKAGES_TOKEN }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.WRITE_GITHUB_PACKAGES_USERNAME }}
          password: ${{ env.WRITE_GITHUB_PACKAGES_TOKEN }}

      - name: Build and push 'swagger' Docker image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: dockerfiles/common
          file: dockerfiles/common/swagger-dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-openjdk17-ibm-gradle-image:
    name: Build the 'openjdk17-ibm-gradle' image
    runs-on: ubuntu-latest
    needs: check-required-secrets-configured

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            dockerfiles/certs
            dockerfiles/common

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/openjdk17-ibm-gradle

      - name: Log in to the GitHub Container registry
        uses: docker/login-action@v3
        env: 
          WRITE_GITHUB_PACKAGES_USERNAME: ${{ vars.WRITE_GITHUB_PACKAGES_USERNAME }}
          WRITE_GITHUB_PACKAGES_TOKEN: ${{ secrets.WRITE_GITHUB_PACKAGES_TOKEN }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.WRITE_GITHUB_PACKAGES_USERNAME }}
          password: ${{ env.WRITE_GITHUB_PACKAGES_TOKEN }}

      - name: Build and push 'openjdk17-ibm-gradle' Docker image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: dockerfiles/certs
          file: dockerfiles/common/openjdk17-ibm-gradle-dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  report-failure:
    # Skip this job for forks
    if: ${{ failure() && github.event_name == 'push' && github.repository_owner == 'galasa-dev' }}
    name: Report failure in workflow
    runs-on: ubuntu-latest
    needs: [build-gpg-image, build-kubectl-image, build-argocdcli-image, build-gitcli-image, build-openapi-image, build-swagger-image, build-openjdk17-ibm-gradle-image]

    steps:
      - name: Report failure in workflow to Slack
        env: 
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run : |
          docker run --rm -v ${{ github.workspace }}:/var/workspace ghcr.io/galasa-dev/galasabld-ibm:main slackpost workflows --repo "automation" --workflowName "${{ github.workflow }}" --workflowRunNum "${{ github.run_id }}" --ref "${{ env.BRANCH }}" --hook "${{ env.SLACK_WEBHOOK }}"
